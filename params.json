{"name":"Jquery.pwstrength.bootstrap","tagline":"jQueryUI Password Strength Meter","body":"====================================================\r\njQuery Password Strength Meter for Twitter Bootstrap\r\n====================================================\r\n\r\nThe jQuery Password Strength Meter is a plugin for Twitter Bootstrap that\r\nprovides rulesets for visualy displaying the quality of a users typed in\r\npassword.\r\n\r\n\r\nRequirements\r\n============\r\n\r\n* jQuery (tested with 1.8.3)\r\n* Bootstrap CSS for progress bars (tested with 2.2.2)\r\n\r\n\r\nOptions\r\n=======\r\n\r\n* __minChar__:\r\n\r\n  Default: `8` (Integer)\r\n\r\n  Sets the minimum required of characters for a password to not be considered\r\n  too weak\r\n\r\n* __verdicts__:\r\n\r\n  Default: `[\"Weak\", \"Normal\", \"Medium\", \"Strong\", \"Very Strong\"]` (Array)\r\n\r\n  The display names for the verdicts related to the progressClass\r\n\r\n* __scores__:\r\n\r\n  Default: `[17, 26, 40, 50]` (Array)\r\n\r\n  The scores used to determine what progressClass and verdicts to display\r\n\r\n* __showVerdicts__:\r\n\r\n  Default: `true` (Boolean)\r\n\r\n  Determines if the verdicts are display on the progress bar or not\r\n\r\n* __viewports__:\r\n\r\n  Default: (Object)\r\n\r\n  ```\r\n  {\r\n      progress: undefined,\r\n      verdict: undefined,\r\n      errors: undefined\r\n  }\r\n  ```\r\n\r\n  An object containing the viewports to use to show the elements of the\r\n  strength meter. Each one can be a CSS selector (`\"#progressbar\"`) or a DOM\r\n  node reference.\r\n\r\n* __usernameField__:\r\n\r\n  Default: `\"#username\"` (String)\r\n\r\n  The username field to match a password to, to ensure the user does not use\r\n  the same value for their password\r\n\r\n* __raisePower__:\r\n\r\n  Default: `1.4` (Double)\r\n\r\n  The value used to modify the final score, allows you to tailor your results\r\n\r\n* __onLoad__:\r\n\r\n  Default: `undefined` (Function)\r\n\r\n  A callback function, fired on load of the widget\r\n\r\n* __onKeyUp__:\r\n\r\n  Default: `undefined` (Function)\r\n\r\n  A callback function, fired on key up when the user is typing\r\n\r\n* __errorMessages__:\r\n\r\n  Default: (Object)\r\n\r\n  ```\r\n  {\r\n      password_to_short : \"The Password is too short\",\r\n      same_as_username : \"Your password cannot be the same as your username\"\r\n  }\r\n  ```\r\n\r\n  An object containing error messages.  These can be overwritten for language\r\n  purposes, and can also be added to for your custom rules.\r\n\r\n\r\nAdding Custom Rules\r\n===================\r\n\r\nThe plugin comes with the functionality to easily define your own custom rules.\r\nThe format is as follows:\r\n\r\n```javascript\r\n$(\"#passwdfield\").pwstrength(\"addRule\", \"ruleName\", function (options, word, score) {}, rule_score, rule_enabled);\r\n```\r\n\r\nExample:\r\n\r\n```javascript\r\n$(\"#passwdfield\").pwstrength(\"addRule\", \"testRule\", function (options, word, score) {\r\n    return word.match(/[a-z].[0-9]/) && score;\r\n}, 10, true);\r\n```\r\n\r\n\r\nCallback Functions\r\n==================\r\n\r\nThe plugin provides two callback functions, onLoad and onKeyUp.  You can use\r\nthem like this:\r\n\r\n```javascript\r\n$(document).ready(function () {\r\n    var options = {\r\n        onLoad: function () {\r\n            $('#messages').text('Start typing password');\r\n        },\r\n        onKeyUp: function (evt) {\r\n            $(evt.target).pwstrength(\"outputErrorList\");\r\n        }\r\n    };\r\n    $(':password').pwstrength(options);\r\n});\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}